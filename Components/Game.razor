@* nav here *@

<FluentStack HorizontalGap="10" Style="padding: 1rem; padding-bottom: 0;">
	<FluentButton IconStart="@(new Icons.Filled.Size20.LauncherSettings())"
				  Appearance="Appearance.Accent"
				  Loading="@running"
				  OnClick="@Run">
		Compile and Run
	</FluentButton>
	<FluentButton IconStart="@(new Icons.Filled.Size16.FStop())"
				  Appearance="Appearance.Neutral"
				  Disabled="@(!running)"
				  OnClick="@Stop">
		Stop
	</FluentButton>
</FluentStack>

@* stuff *@
<div class="center-content">
	<style> @(HeatStyle) </style>
	<div class="game-container" style="--tile-size: 20px; /*calc((100% - 2rem) / 41);*/">
		<Level />

		@foreach (var item in Positions)
		{
			<Karesz Position=@item />
		}

		@foreach ((int x, int y, Core.Level.Tile tile) in Stones)
		{
			<Stone X=@x Y=@y Tile=@tile />
		}
	</div>
</div>

@code {
	[Inject] public HttpClient HttpClient { get; set; }

	private Position[] Positions { get; set; } = [];

	private (int x, int y, Core.Level.Tile tile)[] Stones { get; set; } = [];

	bool running = false;

	CancellationTokenSource cts = new();

	string HeatStyle = string.Empty;

	protected override async Task OnInitializedAsync()
	{
		// register game renderer
		Core.Game.RenderFunction = async delegate (Position[] positions, (int x, int y, Core.Level.Tile tile)[]? map)
		{
			// make sure we are running in the UI sync context
			await InvokeAsync(() =>
			{
				Positions = positions;

				if (map != null)
					Stones = map;

				StateHasChanged();
			});
		};

		await LoadLevelAsync();
	}

	private async Task Run()
	{
		cts = new();

		running = true;

		await Core.Game.StartAsync(cts.Token)
			.ContinueWith(_ =>
			{
				running = false;
				Console.WriteLine(Output.Content);
				Output.Flush();
			});
	}

	private string RGBScale(float value, float min = 0, float max = 1)
	{
		var ratio = 2 * (value - min) / (max - min);
		var b = (int)Math.Max(0, 255 * (1 - ratio));
		var r = (int)Math.Max(0, 255 * (ratio - 1));
		var g = 255 - b - r;
		return $"rgb({r}, {g}, {b})";
	}

	private async Task LoadLevelAsync()
	{
		// TODO: string field to load level
		var lvl = await Core.Level.LoadAsync(HttpClient, "v0.txt");
		if (lvl == null) return;

		Stones = lvl.Enumerate().ToArray();
		HeatStyle = string.Join("\n", lvl.EnumerateHeat().Select((a) => $".tile.x{a.x}.y{a.y} {{ background-color: {RGBScale(a.h, max: 700f)} !important; }}"));
		StateHasChanged();	
	}

	private async Task Stop() => await cts.CancelAsync();
}


