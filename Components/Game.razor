@inject IDialogService DialogService
@inject HttpClient HttpClient

<FluentStack HorizontalGap="20" Style="padding: 1rem; padding-bottom: 0;" VerticalAlignment="VerticalAlignment.Center">
	<FluentButton IconStart="@(new Icons.Filled.Size20.CaretRight())"
				  Appearance="Appearance.Accent"
				  Loading="@Robot.IsRunning"
				  OnClick="@Run">
		Compile and Run
	</FluentButton>
	<FluentButton IconStart="@(new Icons.Filled.Size16.CheckboxUnchecked().WithColor(Color.Error))"
				  Appearance="Appearance.Neutral"
				  Disabled="@(!Robot.IsRunning)"
				  OnClick="@Stop">
		Stop
	</FluentButton>

	<FluentDivider Style="height: 30px;" Role="DividerRole.Presentation" Orientation="Orientation.Vertical"></FluentDivider>

	<FluentSelect Disabled=@Robot.IsRunning Height="50vh" TOption="string" Items=@Core.Level.LEVEL_NAMES SelectedOptionChanged="@OnLevelSelected" Value=@(Core.Robot.CurrentLevel.LevelName) /> 

	<FluentSwitch @bind-Value="@DisplayHeatmap">Heatmap</FluentSwitch>

    <FluentButton Disabled=@Robot.IsRunning @onclick=@Reset IconStart="@(new Icons.Regular.Size16.ArrowUndo())">Reset level</FluentButton>
</FluentStack>

@* stuff *@
<div class="center-content">
	<style> @(DisplayHeatmap ? HeatStyle : string.Empty) </style>
	<div class="game-container" style="--tile-size: 20px; /*calc((100% - 2rem) / 41);*/">
		<Level OnClick=@HandleLevelClick />
		@* players *@
		@foreach (var item in Robots)
		{
			<Karesz IsSelected=@(SelectedRobot.Name == item.Name)
					Position=@item.Position 
					Name=@item.Name
					Stones=@item.Stones />
		}
		@* projectiles *@
		@foreach (var item in Projectiles)
		{
			<Golyesz Position=@item />
		}
		@* objects on the map *@
		@foreach ((int x, int y, Core.Level.Tile tile) in Tiles)
		{
			<Stone X=@x Y=@y Tile=@tile />
		}
	</div>
</div>

@* robot controls  *@

<FluentStack HorizontalGap="10" Style="padding: 1rem; padding-top: 0;" VerticalAlignment="VerticalAlignment.Center">
    <FluentButton @onclick=@OpenModalAsync Disabled=@Robot.IsRunning IconStart="@(new Icons.Filled.Size16.Add())">New Robot</FluentButton>

	<FluentDivider Style="height: 30px; margin: 0 1rem;" Role="DividerRole.Presentation" Orientation="Orientation.Vertical"></FluentDivider>

	@* Select robot *@

	<FluentSelect
		Appearance="Appearance.Outline"
		Disabled=@Robot.IsRunning
		Multiple="false" 
		TOption="RobotInfo" 
		Items=@Robots 
		OptionText=@(x => x.Name) 
		@bind-SelectedOption="@SelectedRobot" />

    <FluentButton @onclick=@TurnLeft Disabled=@(SelectedRobot.IsEmpty || Robot.IsRunning) IconStart="@(new Icons.Filled.Size16.ArrowUpLeft())">Turn left</FluentButton>
    <FluentButton @onclick=@Step Disabled=@(SelectedRobot.IsEmpty || Robot.IsRunning) IconStart="@(new Icons.Filled.Size16.ArrowUp())">Step</FluentButton>
    <FluentButton @onclick=@TurnRight Disabled=@(SelectedRobot.IsEmpty || Robot.IsRunning) IconStart="@(new Icons.Filled.Size16.ArrowUpRight())">Turn right</FluentButton>

	<FluentDivider Style="height: 30px; margin: 0 0.5rem;" Role="DividerRole.Presentation" Orientation="Orientation.Vertical"></FluentDivider>

    <FluentButton @onclick=@RemoveHandler Disabled=@(SelectedRobot.IsEmpty || Robot.IsRunning) IconStart="@(new Icons.Regular.Size16.Delete().WithColor(Color.Error))">Remove</FluentButton>
</FluentStack>


@code {

	private RobotInfo[] Robots { get; set; } = [];

	private Position[] Projectiles { get; set; } = [];

	private RobotInfo SelectedRobot { get; set; }

	private (int x, int y, Core.Level.Tile tile)[] Tiles { get; set; } = [];

	private bool DisplayHeatmap = false;

	private string HeatStyle = string.Empty;

	CancellationTokenSource cts = new();

	[Parameter]
	[SupplyParameterFromQuery(Name = "level")]
	public string? loadLevel { get; set; }

	protected override async Task OnInitializedAsync()
	{
		// register game renderer
		Core.Game.RenderFunction = async delegate (RenderUpdate data)
		{
			// make sure we are running in the UI sync context
			await InvokeAsync(() =>
			{
				Robots = data.Robots;

				if (data.Tiles != null)
					Tiles = data.Tiles;

				if (data.Projectiles != null)
					Projectiles = data.Projectiles;

				StateHasChanged();
			});
		};

		// load level
		if(loadLevel != null)
			await OnLevelSelected(loadLevel);
	}

	private async Task Run()
	{
		cts = new();
		await Core.Game.StartAsync(cts.Token);
	}

	// TODO: this is ugly af
	string RGBScale(float value, float min = 0, float max = 1)
	{
		var ratio = 2 * (value - min) / (max - min);
		var b = (int)Math.Max(0, 255 * (1 - ratio));
		var r = (int)Math.Max(0, 255 * (ratio - 1));
		var g = 255 - b - r;
		return $"rgb({r}, {g}, {b})";
	}

	#region	Event handlers

	private async Task Stop() => await cts.CancelAsync();

	private void Reset()
	{
		Tiles = Robot.Cleanup();
		Projectiles = [];
		StateHasChanged();
	}

	private async Task OnLevelSelected(string levelName)
	{
		var level = await Core.Level.LoadAsync(HttpClient, levelName);
		// TODO: alert
		if (level == null)
		{
			return;
		}

		Tiles = level.Enumerate().ToArray();
		HeatStyle = string.Join("\n", level.EnumerateHeat().Select((a) => $".tile.x{a.x}.y{a.y} {{ background-color: {RGBScale(a.h, max: 700f)} !important; }}"));
		StateHasChanged();
	}

	/// <summary>
	/// Try to set SelectedRobot
	/// </summary>
	/// <returns>false if there are no robots</returns>
	private bool EnsureSelectedRobot()
	{
		if (Robots.Length == 0) return false; // ignore click
													// FluentSelect will not set bound SelectedRobot if there is only one option, so we have to do it manually
		if(SelectedRobot.IsEmpty)
			SelectedRobot = Robots[0]!;

		return true;
	}

	private void HandleLevelClick(Level.CoordinateEventArgs e)
	{
		if (EnsureSelectedRobot())
		{
			// update & re-render
			Robots = Robot.PlaceAt(SelectedRobot.Name, e.x, e.y);
			StateHasChanged();
		}
	}

	private void Move(RelativeDirection direction)
	{
		if(EnsureSelectedRobot())
		{
			Robots = Robot.Move(SelectedRobot.Name, direction);
			StateHasChanged();
		}
	}

	private void Step() => Move(RelativeDirection.Forward);
	private void TurnRight() => Move(RelativeDirection.Right);
	private void TurnLeft() => Move(RelativeDirection.Left);

	private async Task OpenModalAsync()
	{
		var record = new KareszModal.KareszData();
		var dialog = await DialogService.ShowDialogAsync<KareszModal>(record, new DialogParameters()
            {
                Title = $"Create new robot",
                PreventDismissOnOverlayClick = false,
                PreventScroll = true,
            });

		var result = await dialog.Result;
		if (!result.Cancelled && result.Data != null)
		{
			record = (KareszModal.KareszData)result.Data;
			Robots = Robot.Create(record);
			StateHasChanged();
		}
	}

	private void RemoveHandler()
	{
		if(!SelectedRobot.IsEmpty)
		{
			Robots = Robot.Delete(SelectedRobot.Name);
			StateHasChanged();
		}
	}

	#endregion
}

