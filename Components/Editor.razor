@using Microsoft.JSInterop;

<div class="editor" >
    <div class="editor-nav"></div>

    <div class="editor-container" id="@EditorId"></div>

    <div class="editor-statusbar @(IsCompiling ? "compiling" : string.Empty) @(HasIssues ? "haserror" : string.Empty)">
        @if(IsCompiling)
        {
            <span>Compiling...</span>
        }
        else if (HasIssues)
        {
            <span>@(Issues.Count()) issues</span>
        } 
    </div>
</div>

@code {
    private DotNetObjectReference<Editor>? dotnetObjRef;

    [Inject]
    public IJSInProcessRuntime JsRuntime { get; set; }

    [Parameter]
    public EventCallback<string> CodeChanged { get; set; }

    [Parameter]
    public string EditorId { get; set; } = "monaco-editor";

    public bool IsCompiling { get; set; } = false;

    public bool HasIssues { get => Issues.Any(); }

    public IEnumerable<DiagnosticsProvider.Issue> Issues { get; set; } = [];

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            dotnetObjRef = DotNetObjectReference.Create(this);
            this.JsRuntime.InvokeVoid("Editor.create", EditorId, WorkspaceService.DEFAULT_TEMPLATE, dotnetObjRef);
        }

        base.OnAfterRender(firstRender);
    }

    [JSInvokable]
    public void updateCode(string code)
    {
        WorkspaceService.SetCode(code);
    }

    [JSInvokable]
    public async Task<IEnumerable<object>> getCompletionItems(string code, int offset)
    {
        var result = await CompletionProvider.GetCompletionItems(code, offset);
        return result.Select(x => (object)x);
    }

    [JSInvokable]
    public async Task<object?> getHoverinfo(int offset)
    {
        return (object?)(await HoverinfoProvider.GetHoverinfo(offset));
    }

    [JSInvokable]
    public async Task<IEnumerable<object>> getDiagnostics(string code)
    {
        IsCompiling = true; 
        StateHasChanged();

        Issues = await DiagnosticsProvider.GetDiagnosticsAsync(code);

        IsCompiling = false;
        StateHasChanged();

        Preprocess.Asyncronize(code);

        return Issues.Select(x => (object)x);
    }
}
